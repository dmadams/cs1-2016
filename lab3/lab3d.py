'''
lab3d.py
Simple L-system simulator.
'''

# References: 
#   http://en.wikipedia.org/wiki/L-systems
#   http://www.kevs3d.co.uk/dev/lsystems/
# N.B. http://en.wikipedia.org/wiki/MU_puzzle for midterm?

import math

# ---------------------------------------------------------------------- 
# Example L-systems.
# ---------------------------------------------------------------------- 

# Koch snowflake.
koch = { 'start' : 'F++F++F', 
         'F'     : 'F-F++F-F' }
koch_draw = { 'F' : 'F 1', 
              '+' : 'R 60', 
              '-' : 'L 60' }

# Hilbert curve.
hilbert  = { 'start' : 'A', 
             'A'     : '-BF+AFA+FB-' , 
             'B'     : '+AF-BFB-FA+' }
hilbert_draw = { 'F' : 'F 1', 
                 '-' : 'L 90', 
                 '+' : 'R 90' }

# Sierpinski triangle.
sierpinski = { 'start' : 'F-G-G', 
               'F'     : 'F-G+F+G-F', 
               'G'     : 'GG' }
sierpinski_draw = { 'F' : 'F 1', 
                    'G' : 'F 1', 
                    '+' : 'L 120', 
                    '-' : 'R 120' }

# ---------------------------------------------------------------------- 
# L-systems functions.
# ---------------------------------------------------------------------- 

def update(lsys, s):
    '''Takes two arguments, a dictionary, which specifies both the starting 
    string and the update rules for a particular L-system, and a L-system
    string. Generates the next version of the L-system string. 
    '''
    lst_s = list(s)
    for a in range(len(lst_s)):
        if lsys.has_key(lst_s[a]): 
            lst_s[a] = lsys[lst_s[a]]
    x = ''.join(lst_s)
    return x

def iterate(lsys, n):
    '''Takes two arguments, a L-system dictionary and an integer that is greater
    than or equal to 0. Returns the string that is generated by starting with
    the starting string for the L-system and updating n times. 
    '''
    x = lsys['start']
    for a in range(n):
        x = update(lsys, x)
    return x

def lsystemToDrawingCommands(draw, s):
    '''Takes two arguments, a dictionary whose keys are characters in L-system 
    strings and whose values are drawing commands and a L-system string. Returns
    the list of drawing commands needed to draw the figure corresponding to the
    L-system string.
    '''
    x = []
    lst_s = list(s)
    for a in lst_s:
        if draw.has_key(a):
            x.append(a)
    return x

def nextLocation(x, y, angle, cmd):
    '''Takes four arguments, the current x coordinate value of the turtle,
    the current y coordinate value of the turtle, the current direction 
    (angle from the horizontal) the turtle is facing, and a drawing command.
    Returns a tuple of three values, the next x coordinate of the turtle, 
    the next y coordinate, and the next angle.
    '''
    if cmd[0] == 'F':
        x = float(x) + float(cmd[2:]) * math.cos(angle * (math.pi / 180))
        y = float(y) + float(cmd[2:]) * math.sin(angle * (math.pi / 180))
    elif cmd[0] == 'L':
        angle = float(angle) + float(cmd[2:])
    elif cmd[0] == 'R':
        angle = float(angle) - float(cmd[2:])
    if (angle < 0 or angle >= 360):
        angle %= 360
    return (x, y, angle)

def bounds(cmds):
    '''Takes one argument, a list of commands, and returns the minimum and 
    maximum x and y coordinates ever achieved by the turtle as it moves to make
    the drawing as (xmin, xmax, ymin, ymax).
    '''
    x = 0.0
    y = 0.0
    angle = 0.0
    xmin = 0.0
    xmax = 0.0
    ymin = 0.0
    ymax = 0.0
    for a in cmds:
        x = nextLocation(x, y, angle, a)[0]
        y = nextLocation(x, y, angle, a)[1]
        angle = nextLocation(x, y, angle, a)[2]
        if x > xmax:
            xmax = x
        if y > ymax:
            ymax = y
        if x < xmin:
            xmin = x
        if y < ymin:
            ymin = y
    return (xmin, xmax, ymin, ymax)

def saveDrawing(filename, bounds, cmds):
    '''Takes three arguments, a filename to write to, the bounds of the 
    resulting drawing, as a tuple of floating-point numbers 
    (xmin, xmax, ymin, ymax), and a list of drawing commands. This function 
    will write this information to the file corresponding to the given filename
    by first writing the bounds information on a single line (as four 
    floating-point numbers with spaces between them but no parentheses or
    commas), and then by writing the drawing commands to the file, one per line. 
    '''
    f = open(filename, 'w')
    f.write('%s %s %s %s' %(bounds[0], bounds[1], bounds[2], bounds[3]))
    for a in cmds:
        f.write('\n%s' %(a))
    f.close()

def makeDrawings(name, lsys, ldraw, imin, imax):
    '''Make a series of L-system drawings.'''
    print 'Making drawings for %s...' % name
    for i in range(imin, imax):
        l = iterate(lsys, i)
        cmds = lsystemToDrawingCommands(ldraw, l)
        b = bounds(cmds)
        saveDrawing('%s_%d' % (name, i), b, cmds)

def main():
    makeDrawings('koch', koch, koch_draw, 0, 6)
    makeDrawings('hilbert', hilbert, hilbert_draw, 1, 6)
    makeDrawings('sierpinski', sierpinski, sierpinski_draw, 0, 10)

